{
  "_id": "5a30dfe6f5a2940037e5a550",
  "type": "code:0.0.1:local:32498h32f2",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Get my token for the remote datasource \n      \n      let nodeId = INPUT.data.internalId;\n      let publicKey = INPUT.data.publicKey;\n      \n      // Get local ExternalIdentity if it exists \n      // - should exist, unless we deleted it! \n      let nodes = await universe.searchMemory({\n        filter: {\n          sqlFilter: {\n            _id: nodeId,\n            type: 'external_identity:0.0.1:local:8982f982j92',\n            // data: {\n            //   publicKey: publicKey\n            // }\n          },\n          // function for returning data from the Node, after filtering a bit \n          // - includes both the Node, and Nodes with nodeId (pointers) \n          filterNodes: tmpNodes=>{\n            return tmpNodes;\n          }\n        }\n      });\n      \n      if(!nodes || !nodes.length){\n        \n        return resolve({\n          type: 'error:..',\n          data: {\n            msg: 'No ExternalIdentityNode when finding'\n          }\n        });\n        \n      }\n      \n      let ExternalIdentityNode = nodes[0];\n      let token = ExternalIdentityNode.data.token;\n      \n      // ExternalIdentityNode.data.test1 = 'test1';\n      // let updatedExternalIdentityNode = await universe.updateNode(ExternalIdentityNode);\n      \n      // return resolve({\n      //   ExternalIdentityNode,\n      //   token\n      // })\n      // let token = await universe.capabilities().\n      // run_action_sequence:0.0.1:local:293fh8239hsdf23f\n      \n                \n      let data = {\n        type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n        data: {\n          actions: [\n            \n            {\n              matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n              dataForAction: {\n                type: 'string:...',\n                data: token\n              }\n            }\n                    \n            // {\n            //   matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n            //   dataForAction: {\n            //     type: 'standard_query_request:0.0.1:local:65723f2khfds',\n            //     data: {\n            //       matchFunctionNode: {\n            //         // query here!\n            //         // action_pointer:0.0.1:local:238972ncr\n            //         type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n            //         data: {\n            //           code: `(()=>{\n            //             // Action \n            //             // - childNode common_type:0.0.1:local:298fh29h2323f == \"action\" \n    \n            //             let inputNode = INPUT.data.inputNode;\n    \n            //             let actionSearch = {\n            //               type: 'action_pointer:0.0.1:local:238972ncr', // should use \"common_type\" ?? \n            //             }\n            //             let hasActionPointerChild = miniverse.lodash.find(inputNode.nodes, actionSearch);\n    \n            //             if(!hasActionPointerChild){\n            //               return false;\n            //             }\n    \n            //             // strip childnodes\n            //             delete inputNode.nodes;\n            //             // delete inputNode.parent;\n            //             delete inputNode.data;\n    \n            //             return inputNode;\n            //           })()`\n            //         }\n            //       },\n            //       // expected/allowed schemas for return \n            //       outputSchemas: [\n            //         'query_result:0.0.1:local:32490usfj23o23f',\n            //         'internal_error_output:0.0.1:local:32948x2u3cno2c'\n            //       ]\n            //     }\n            //   }\n            // }\n          \n          ]\n        }\n      }\n      let response;\n      try {\n        response = await universe.webrequest.post({\n          url: 'http://localhost:7005/ai',\n          // url: 'http://google.com',\n          body: data,\n          json: true\n        });\n      }catch(err){\n        return resolve({\n          error: true,\n          err,\n          errStr: err.toString()\n        });\n      }\n      \n      resolve({\n        remoteResponse: response\n      });\n    }catch(err){\n      reject(err);\n    }\n  })\n})()",
    "note": "search remote datasource",
    "key": "142170be-9d26-4858-8ed6-dffa875fef96"
  },
  "active": true,
  "createdAt": 1513152486020,
  "updatedAt": 1513152507196
}