{
  "_id": "5a30e033f5a2940037e5a551",
  "type": "code:0.0.1:local:32498h32f2",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Expecting INPUT = capability_input_node:0.0.1:local:29f8239a13h9\n      // - capabilityNode: Object,\n      // - externalInputNode: Object,\n      \n      // Load the \"Teacher\" capability\n      \n      let cmdInputNode = INPUT.data.externalInputNode;\n      \n      if(cmdInputNode.type != 'standard_capability_action:0.0.1:local:298j291bs'){\n        console.log('Unexpected input schema');\n        return reject();\n      }\n      \n      let inputAction = cmdInputNode.data.action;\n      let inputOpts = cmdInputNode.data.options;\n      \n      // get local Teacher node\n      // - used in almost all actions below \n      let tmpExternalIdentityNodes = await universe.searchMemory({\n        filter: {\n          sqlFilter: {\n            type: 'external_identity:0.0.1:local:8982f982j92',\n            data: {\n              commonName: 'teacher'\n            }\n          }\n        }\n      });\n      let Teacher_ExternalIdentityNode = tmpExternalIdentityNodes[0];\n      \n      \n      switch(inputAction){\n        \n        case 'updateLocalCode':\n          console.log('Teacher.updateLocalCode');\n          \n          // Fetch all of my local Code/React nodes \n          // - get the key (unique) for each) \n          // - ask Teacher Second for code matches for code items (and react components) \n          let CodeNodes = await universe.searchMemory({\n            filter: {\n              filterNodes: tmpNodes=>{\n                return new Promise((resolve, reject)=>{\n                  tmpNodes = tmpNodes.map(tmpNode=>{\n                    let types = [\n                      'code:0.0.1:local:32498h32f2',\n                      'react_component:0.0.1:local:98912hd89',\n                      'preparse_code:0.0.1:local:39fn02n0nfns',\n                      'action_code:0.0.1:local:290j92jfn239nma'\n                    ]\n                    if(types.indexOf(tmpNode.type) === -1){\n                      return false;\n                    }\n                    delete tmpNode.parent;\n                    delete tmpNode.nodes;\n                    return tmpNode;\n                  })\n                  resolve(universe.lodash.compact(tmpNodes));\n                });\n              },\n            }\n          });\n          \n          console.log('CodeNodes:', CodeNodes);\n          \n          let codeNodeIds = universe.lodash.compact(CodeNodes.map(n=>{\n            return n.data ? n.data.key:null;\n          }));\n          \n          console.log('codeNodeIds', codeNodeIds);\n        \n        \n          try {\n            \n            let teacherResponse = await universe.loadAndRunCapability('TalkToSecond',{},{\n              type: 'standard_capability_action:0.0.1:local:298j291bs',\n              data: {\n                action: 'send',\n                options: {\n                  ExternalIdentityNode: Teacher_ExternalIdentityNode,\n                  RequestNode: {\n                    type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                    data: {\n                      actions: [\n                        {\n                          matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                          dataForAction: {\n                            type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                            data: {\n                              matchFunctionNode: {\n                                type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                data: {\n                                  code: `(()=>{\n                                    \n                                    let inputNode = INPUT.data.inputNode;\n                                    \n                                    // searching for children in a specific folder \n                                    if(!inputNode.parent || \n                                      !inputNode.parent.data || \n                                      inputNode.parent.data.key != 'teaching_sources'){\n                                      return false;\n                                    }\n                                    \n                                    // // if(inputNode.nodeId){\n                                    // //   return false;\n                                    // // }\n                                    \n                                    let types = ${JSON.stringify(codeNodeIds)};\n                                    // let types = ['619427af-8b4b-4c58-975f-9cc95f55d6f6'];\n                                    \n                                    if(types.indexOf(inputNode.data.key) === -1){\n                                      return false;\n                                    }\n                                    delete inputNode.nodes;\n                                    delete inputNode.parent;\n                                    \n                                    return inputNode;\n                                    \n                                  })()`\n                                }\n                              }\n                            }\n                          }\n                        }\n                      ]\n                      \n                    }\n                  }\n                }\n              }\n            });\n            \n            console.log('Teacher Response', teacherResponse);\n            console.log('TeacherNodes (matching local):', teacherResponse.data.actionResponses[0].data);\n            \n            let TeacherNodes = teacherResponse.data.actionResponses[0].data;\n            \n            let nodesToUpdate = [];\n            \n            // Find which local ones are different \n            for(let node of CodeNodes){\n              // find match in retrieved \n              let tNode = universe.lodash.find(TeacherNodes,tn=>{\n                try {\n                  return tn.data.key == node.data.key;\n                }catch(err){}\n              })\n              if(!tNode){\n                universe.console.info('Missing remote teacherNode:', node.data.key);\n                continue;\n              }\n              let localHash = universe.bitcoin.crypto.sha256(node.data.code).toString();\n              let remoteHash = universe.bitcoin.crypto.sha256(tNode.data.code).toString();\n              if(localHash == remoteHash){\n                universe.console.log('No update needed:', node.data.key);\n                continue;\n              }\n              \n              // should update this one with remote info \n              universe.console.log('--UPDATE FROM--',node, '--TO--', tNode);\n              \n              // // newer updatedAt value? \n              // if(){\n              //   console.error('Local Version is more recent!!!', 'Local:', node, 'Remote:', tNode);\n              //   continue;\n              // }\n              \n              nodesToUpdate.push({\n                old: node,\n                new: tNode\n              });\n              \n            }\n            \n            \n            // var hash = universe.bitcoin.crypto.sha256(words)\n            // Update my local nodes's data.code field \n            \n            \n            return resolve({\n              type: 'array_of_old_and_new_nodes:...',\n              data: nodesToUpdate\n            });\n            \n          }catch(err){\n            console.error('Failed Teacher connection', err);\n            return reject({});\n          }\n          \n        \n          return;\n          \n          \n        case 'fetchCodeForUserCommands':\n          console.log('Teacher.fetchCodeForUserCommands');\n          \n          // // Fetch all of my local Code/React nodes \n          // // - get the key (unique) for each) \n          // // - ask Teacher Second for code matches for code items (and react components) \n          // let CodeNodes = await universe.searchMemory({\n          //   filter: {\n          //     filterNodes: tmpNodes=>{\n          //       return new Promise((resolve, reject)=>{\n          //         tmpNodes = tmpNodes.map(tmpNode=>{\n          //           let types = [\n          //             'code:0.0.1:local:32498h32f2',\n          //             'react_component:0.0.1:local:98912hd89'\n          //           ]\n          //           if(types.indexOf(tmpNode.type) === -1){\n          //             return false;\n          //           }\n          //           delete tmpNode.parent;\n          //           delete tmpNode.nodes;\n          //           return tmpNode;\n          //         })\n          //         resolve(universe.lodash.compact(tmpNodes));\n          //       });\n          //     },\n          //   }\n          // });\n          \n          // console.log('CodeNodes:', CodeNodes);\n          \n          // let codeNodeIds = universe.lodash.compact(CodeNodes.map(n=>{\n          //   return n.data ? n.data.key:null;\n          // }));\n          \n          // console.log('codeNodeIds', codeNodeIds);\n        \n        \n          try {\n            \n            let teacherResponse2 = await universe.loadAndRunCapability('TalkToSecond',{},{\n              type: 'standard_capability_action:0.0.1:local:298j291bs',\n              data: {\n                action: 'send',\n                options: {\n                  ExternalIdentityNode: Teacher_ExternalIdentityNode,\n                  RequestNode: {\n                    type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                    data: {\n                      actions: [\n                        {\n                          matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                          dataForAction: {\n                            type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                            data: {\n                              matchFunctionNode: {\n                                type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                data: {\n                                  code: `(()=>{\n                                    \n                                    let inputNode = INPUT.data.inputNode;\n                                    \n                                    // searching for children in a specific folder \n                                    if(!inputNode.parent || \n                                      !inputNode.parent.data || \n                                      inputNode.parent.data.key != 'usercommand_sources'){\n                                      return false;\n                                    }\n                                    \n                                    // // if(inputNode.nodeId){\n                                    // //   return false;\n                                    // // }\n                                    \n                                    delete inputNode.nodes;\n                                    delete inputNode.parent;\n                                    \n                                    return inputNode;\n                                    \n                                  })()`\n                                }\n                              }\n                            }\n                          }\n                        }\n                      ]\n                      \n                    }\n                  }\n                }\n              }\n            });\n            \n            console.log('Teacher Response', teacherResponse2);\n            console.log('TeacherNodes (code nodes):', teacherResponse2.data.actionResponses[0].data);\n            \n            let TeacherCodeNodes = teacherResponse2.data.actionResponses[0].data;\n            \n            return resolve({\n              type: 'array_of_code_nodes:...',\n              data: TeacherCodeNodes\n            });\n            \n          }catch(err){\n            console.error('Failed Teacher TeacherCodeNodes', err);\n            return reject({});\n          }\n          \n        \n          return;\n          \n        default:\n          return reject({});\n          \n      }\n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()",
    "note": "Capability: Teacher",
    "key": "db92db6d-bf90-429d-ba03-92ec20c8cff3"
  },
  "active": true,
  "createdAt": 1513152563924,
  "updatedAt": 1513750634070
}