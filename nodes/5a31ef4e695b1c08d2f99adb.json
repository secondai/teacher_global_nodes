{
  "_id": "5a31ef4e695b1c08d2f99adb",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "internalId": "DefaultLayout",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Router = universe.ReactRouterDomRouter;\n      const Route = universe.ReactRouterDomRoute;\n      const Switch = universe.ReactRouterDomSwitch;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        render(){\n          return (\n            <div>\n              ErrorLoading\n            </div>\n          )\n        }\n      }\n      \n      \n      class DefaultLayout extends React.Component {\n        constructor(props){\n          super(props)\n          this.state = {};\n        }\n        \n        @autobind\n        componentDidMount(){\n          this.fetchPrivateName();\n        }\n        \n        @autobind\n        fetchPrivateName(){\n          \n          return new Promise(async (resolve, reject)=>{\n              \n            let ExternalIdentityNodes = await universe.searchMemory({\n              filter: {\n                sqlFilter: {\n                  type: 'external_identity:0.0.1:local:8982f982j92',\n                  data: {\n                    commonName: 'main'\n                  }\n                }\n              }\n            });\n            let ExternalIdentityNode = ExternalIdentityNodes[0];\n            \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                            dataForAction: {\n                              type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              data: {\n                                matchFunctionNode: {\n                                  // query here!\n                                  // action_pointer:0.0.1:local:238972ncr\n                                  type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                  data: {\n                                    code: `(()=>{\n                                      // Action \n                                      // - childNode common_type:0.0.1:local:298fh29h2323f == \"action\" \n                                      \n                                      let inputNode = INPUT.data.inputNode;\n                                      \n                                      if(inputNode.nodeId){\n                                        return false;\n                                      }\n                                      \n                                      if(inputNode.type != 'identity_private:0.0.1:local:3298f2j398233'){\n                                        return false;\n                                      }\n                                      return inputNode;\n                                      \n                                    })()`\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n              let nodes = response.data.actionResponses[0].data;\n              \n              let privateNode = nodes[0];\n              console.log('PrivateNode:', privateNode);\n              \n              this.props.setState({\n                privateNode\n              })\n              \n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n            }\n          });\n        }\n        \n        @autobind\n        async handleUpdateApp(){\n          \n          // get Code and React ids from local\n          // - fetch new from Teacher \n          \n          \n          // run Capability: Teacher.updateLocal\n          // - learn from Remote \n          // universe.loadAnd\n          \n          \n          this.setState({\n            updatingLocal: true\n          });\n        \n          let response = await universe.loadAndRunCapability('Teacher',{},{\n            type: 'standard_capability_action:0.0.1:local:298j291bs',\n            data: {\n              action: 'updateLocalCode',\n              options: {}\n            }\n          });\n          \n          // Iterate over returned \"to Update\" nodes \n          let toUpdate = response.data || [];\n          \n          console.log('Got local toUpdate', toUpdate.length, toUpdate);\n          \n          let answer;\n          try {\n            answer = WINDOW.prompt(`Overwrite local with Updates? ${toUpdate.length} changed. (y/reload)`,'reload');\n            if(!answer || ['reload','y'].indexOf(answer) === -1){\n              this.setState({\n                updatingLocal: false\n              });\n              return false;\n            }\n          }catch(err){\n            console.error(err);\n            this.setState({\n              updatingLocal: false\n            });\n            return false;\n          }\n          \n          console.log('Updating (saving locally)');\n          \n          // overwrite...\n          for(let data of toUpdate){\n            let nodeToSave = data.old;\n            nodeToSave.data.code = data.new.data.code;\n            \n            console.log('Updating Local NodeToSave:', nodeToSave);\n            let updatedNode = await universe.updateNode(nodeToSave);\n          }\n          \n          this.setState({\n            updatingLocal: false\n          });\n          \n          if(answer == 'reload'){\n            setTimeout(()=>{\n              WINDOW.location.reload();\n            },1000);\n          }\n          \n        }\n        \n        @autobind\n        handleUpdateRemote(){\n          // emit Event for remote to update Code and React Components \n          \n          return new Promise(async (resolve, reject)=>{\n            \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'update_code_from_teacher:0.0.1:local:893j29jfj209',\n                            dataForAction: {\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              // got response from Remote Second after updateRemote\n              console.log('remote Response (update_code_from_teacher):', response);\n              \n              let updated = response.data.actionResponses[0].data.updated;\n              WINDOW.alert('Updated: ' + updated.length);\n              \n              // emit event to update locally \n              try {\n                universe.EE.emit('nodes-modified', '');\n              }catch(err){\n                console.error(err);\n              }\n              \n            }catch(err){\n            }\n            \n          });\n            \n            \n        }\n        \n        @autobind\n        makeSaveRequest(nodeToSave, skipEvent){\n          return new Promise(async (resolve, reject) => {\n            \n            this.setState({\n              saving: true\n            })\n            \n            // Make request to save Node on remote \n            try {\n              \n              let ExternalIdentityNodes = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'external_identity:0.0.1:local:8982f982j92',\n                    data: {\n                      commonName: 'main'\n                    }\n                  }\n                }\n              });\n              let ExternalIdentityNode = ExternalIdentityNodes[0];\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'update_node:0.0.1:local:392821982y3',\n                            dataForAction: {\n                              type: 'node:0.0.1:local:123445',\n                              data: nodeToSave\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('Update response:', response);\n              \n              if(skipEvent !== true){\n                try {\n                  universe.EE.emit('nodes-modified', '');\n                }catch(err){\n                  console.error(err);\n                }\n              }\n              \n              this.setState({\n                saving: false\n              })\n              \n              return resolve({\n                type: 'node:...',\n                data: response.data.actionResponses[0]\n              });\n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n              \n              alert('Failed');\n              \n              this.setState({\n                saving: false\n              })\n              \n            }\n            \n          })\n        }\n      \n        render(){\n          const { component: Component, ...rest } = this.props;\n      \n          return (\n            <Route {...rest} render={matchProps => (\n                \n              <div className=\"full-screen\">\n                <div className=\"flex-header\">\n                  \n                  <nav className=\"navbar is-transparent\">\n                    <div className=\"navbar-brand\">\n                      <Link className=\"navbar-item\" to=\"/\">\n                        <h1 className=\"title is-4\">\n                          Second \n                          {\n                            this.props.state.privateNode && this.props.state.privateNode.data.name ? \n                            <span>: {this.props.state.privateNode.data.name}</span>\n                            :''\n                          }\n                        </h1>\n                      </Link>\n                      <div className=\"navbar-burger burger\" data-target=\"navbarExampleTransparentExample\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                      </div>\n                    </div>\n                  \n                    <div id=\"navbarExampleTransparentExample\" className=\"navbar-menu\">\n                      <div className=\"navbar-start\">\n                        <Link className=\"navbar-item\" to=\"/\">\n                          Canvas/Input\n                        </Link>\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\n                          <Link className=\"navbar-link\" to=\"/apps\">\n                            My Apps\n                          </Link>\n                          <div className=\"navbar-dropdown\">\n                            <Link className=\"navbar-item\" to=\"/shop\">\n                              Shop/Sell\n                            </Link>\n                            <Link className=\"navbar-item\" to=\"/events\">\n                              Calendar/Events\n                            </Link>\n                            <hr className=\"navbar-divider\" />\n                            <Link className=\"navbar-item\" to=\"/addapp\">\n                              <span className=\"icon\">\n                                <span className=\"fa fa-plus\"></span>\n                              </span>\n                              Add App\n                            </Link>\n                          </div>\n                        </div>\n                        \n                        <Link className=\"navbar-item\" to=\"/messages\">\n                          Notifications\n                        </Link>\n                        <Link className=\"navbar-item\" to=\"/dev\">\n                          Dev\n                        </Link>\n                      </div>\n                      <div className=\"navbar-end\">\n                      \n                        <div className=\"navbar-item dropdown is-hoverable is-right\">\n                          <div className=\"dropdown-trigger\">\n                                                    \n                            <button className={\"button is-small\" + ((this.state.updatingLocal || this.state.updatingRemote) ? ' is-loading':'')}>\n                              <span>Update Code/React </span>\n                              <span className=\"icon is-small\">\n                                <i className=\"fa fa-angle-down\"></i>\n                              </span>\n                            </button>\n                          </div>\n                          <div className=\"dropdown-menu\">\n                            <div className=\"dropdown-content\">\n                              \n                              <a className=\"dropdown-item\" onClick={this.handleUpdateApp}>\n                                Local App \n                              </a>\n                              <a className=\"dropdown-item\" onClick={this.handleUpdateRemote}>\n                                Remote Second\n                              </a>\n                              \n                            </div>\n                          </div>\n                        </div>\n                          \n                      {/*\n                        <div className=\"navbar-item\">\n                          <button className={\"button is-small \" + (this.state.updatingLocal ? 'is-loading':'')} onClick={this.handleUpdateApp}>\n                            Update App CodeNodes\n                          </button>\n                        </div>\n                        <div className=\"navbar-item\">\n                          <button className={\"button is-small \" + (this.state.updatingRemote ? 'is-loading':'')} onClick={this.handleUpdateRemote}>\n                            Update Remote Code\n                          </button>\n                        </div>\n                      */}\n                      </div>\n                    </div>\n                    \n                  </nav>\n                  \n                </div>\n                \n                <Component {...matchProps} />\n                \n                <div className=\"flex-footer\">\n                  &nbsp;\n                </div>\n                \n                <ReactResizeDetector handleWidth handleHeight onResize={(w,h)=>this.props.setState({newWindowSize:[w,h]})} />\n                \n              </div>\n              \n            )} />\n          )\n        }\n      };\n      \n      DefaultLayout = universe.ReactGlobalState(DefaultLayout);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: DefaultLayout\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "key": "b312c627-6b2a-49cb-aab1-67193156a40c"
  },
  "active": true,
  "createdAt": 1513221966752,
  "updatedAt": 1513747368579
}