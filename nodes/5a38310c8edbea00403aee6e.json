{
  "_id": "5a38310c8edbea00403aee6e",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "internalId": "MainUserComponent",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        render(){\n          return (\n            <div>\n              ErrorLoading\n            </div>\n          )\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            browserList: null,\n            remoteList: null,\n            mainEditor: null,\n            remoteFriendList: null,\n            remoteFriendDataList: null\n            // browser: null,\n          }\n        }\n        \n        componentDidMount(){\n          \n          console.log('Mounted MainUserComponent');\n          \n          return new Promise(async (resolve,reject)=>{\n            \n            let ExternalIdentityNodes = await universe.searchMemory({\n              filter: {\n                sqlFilter: {\n                  type: 'external_identity:0.0.1:local:8982f982j92',\n                  data: {\n                    commonName: 'main'\n                  }\n                }\n              }\n            });\n            let ExternalIdentityNode = ExternalIdentityNodes[0];\n            this.props.setState({\n              OwnerSecondExternalIdentityNode: ExternalIdentityNode\n            });\n              \n            \n            let browserList = await this.props.loadComponent({\n              internalId: 'ListComponent'\n            });\n            this.setState({\n              browserList\n            })\n            \n            let remoteList = await this.props.loadComponent({\n              internalId: 'ListRemoteComponent'\n            });\n            this.setState({\n              remoteList\n            })\n            \n            let mainEditor = await this.props.loadComponent({\n              internalId: 'MainEditorComponent'\n            });\n            this.setState({\n              mainEditor\n            })\n            \n            \n            let remoteFriendList = await this.props.loadComponent({\n              internalId: 'ListRemoteConnectedToComponent'\n            });\n            this.setState({\n              remoteFriendList\n            })\n            \n            \n            let remoteFriendDataList = await this.props.loadComponent({\n              internalId: 'ListRemoteConnectedToDataComponent'\n            });\n            this.setState({\n              remoteFriendDataList\n            })\n            \n          \n          });\n          \n          \n          // this.setState({\n          //   value: 5\n          // });\n          \n          // WINDOW.alert(10);\n          // let x = WINDOW.prompt('what','');\n          // this.setState({\n          //   value: parseInt(x,10)\n          // })\n          \n          \n          // let IdentityNode = null;\n          // let identities = await universe.searchMemory({\n          //   filter: {\n          //     sqlFilter: {\n          //       type: 'remote_datasource:0.0.1:local:298f3h92hf9s8dhf23f'\n          //     },\n          //     // function for returning data from the Node, after filtering a bit \n          //     // - includes both the Node, and Nodes with nodeId (pointers) \n          //     filterNodes: tmpNodes=>{\n          //       // this runs isolated, outside of the above context? (not sure) \n          //       return new Promise((resolve, reject)=>{\n          //         resolve(tmpNodes);\n          //       });\n          //     },\n          //   }\n          // });\n        }\n        \n        @autobind\n        handleTest(){\n          this.setState({\n            value: this.state.value + 1\n          })\n        }\n        \n        @autobind\n        async handleClearMemory(){\n          \n          await universe.clearMemory();\n          WINDOW.location.reload();\n          \n        }\n        \n        \n        render(){\n          \n          const BrowserListComponent = this.state.browserList || ErrorComponent;\n          const RemoteListComponent = this.state.remoteList || ErrorComponent;\n          const RemoteFriendListComponent = this.state.remoteFriendList || ErrorComponent;\n          const RemoteFriendDataListComponent = this.state.remoteFriendDataList || ErrorComponent;\n          \n          const MainEditorComponent = this.state.mainEditor || ErrorComponent;\n          \n          return (\n            <div className=\"flex-main\">\n              <div className=\"flex-left\" style={{padding:'4px'}}>\n                \n                {/* \n                All Friends \n                */}\n                <div>\n                  <RemoteFriendListComponent />\n                </div>\n                \n              </div>\n              <div className=\"flex-left\" style={{padding:'4px'}}>\n                \n                <div>\n                  <RemoteFriendDataListComponent\n                    resultType=\"actions\"\n                  />\n                </div>\n                \n              </div>\n              <div className=\"flex-left\" style={{padding:'4px'}}>\n                \n                <div>\n                  <RemoteFriendDataListComponent\n                    resultType=\"photos\"\n                  />\n                </div>\n                \n              </div>\n              <div className=\"flex-middle\">\n                \n                Details\n                \n                <pre><code>{JSON.stringify(this.props.state.ShowDetailNode || this.props.state.ExternalIdentityNode, null, 2)}</code></pre>\n                \n              </div>\n              \n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "key": "1e4d08d3-f995-4b15-9913-df93b3f39d21",
    "note": "MainUserComponent"
  },
  "active": true,
  "createdAt": 1513632012880,
  "updatedAt": 1513632034195
}